<div class="ticket-status">
    <h5>@ListStatus (@Tickets.Count())</h5>

    <ul class="dropzone @dropClass"
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        @ondrop="HandleDrop"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave">

        @foreach (var ticket in Tickets)
        {
            <Ticket TicketModel="ticket" />
        }

    </ul>
</div>

@code {

    [CascadingParameter] TicketsContainer Container { get; set; }
    [Parameter] public TicketStatuses ListStatus { get; set; }
    [Parameter] public TicketStatuses[] AllowedStatuses { get; set; }

    List<TicketModel> Tickets = new List<TicketModel>();
    string dropClass = "";

    protected override void OnParametersSet()
    {
        Tickets.Clear();
        Tickets.AddRange(Container.Tickets.Where(x => x.Status == ListStatus));
    }

    private void HandleDragEnter()
    {
        if (ListStatus == Container.Payload.Status) return;

        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status))
        {
            dropClass = "no-drop";
        }
        else
        {
            dropClass = "can-drop";
        }
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";

        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status)) return;

        await Container.UpdateJobAsync(ListStatus);
    }
}
